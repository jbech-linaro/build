# these are not needed if you are running qemu tftp emulation as is the default
# serverip_static=192.168.1.100
# tftp_prefix=my-sub-dir/

arch=arm
baudrate=115200
board_name=qemu-arm
board=qemu-arm
bootdelay=2
cpu=armv8
efi_dtb_prefixes=/ /dtb/ /dtb/current/
uart_console=pl011@90000000
stderr=${uart_console}
stdin=${uart_console}
stdout=${uart_console}
vendor=emulation

# Addresses
fdt_addr=0x40000000
fdt_high=0xffffffff
initrd_high=0xffffffff
kernel_addr_r=0x40400000
ramdisk_addr_r=0x44000000
fit_addr_r=0x48000000

# max sizes based on addresses above
# fdt 4M
# kernel 60M
# ramdisk 64M
# fit 384M (if ram is 512M)

# Fit configs
fitconfig1=run netloadfit; bootm ${fit_addr_r}#config-1
fitconfig2=run netloadfit; bootm ${fit_addr_r}#config-2
fitconfig3=run netloadfit; bootm ${fit_addr_r}#config-3
fitconfig4=run netloadfit; bootm ${fit_addr_r}#config-4

# Netboot targets
netboot=run do_dhcp; tftp ${kernel_addr_r} ${tftp_prefix}uImage; tftp ${ramdisk_addr_r} ${tftp_prefix}rootfs.cpio.uboot; bootm ${kernel_addr_r} ${ramdisk_addr_r} ${fdt_addr}
netbootfit=run do_dhcp; tftp ${fit_addr_r} ${tftp_prefix}image.fit; bootm
netbootgrub=run do_dhcp; tftp ${kernel_addr_r} ${tftp_prefix}grub2-arm64.efi; bootefi ${kernel_addr_r}
netloadfit=run do_dhcp; tftp ${fit_addr_r} ${tftp_prefix}image.fit

# helper sub scripts
do_dhcp=setenv autoload no; dhcp; if test x"${serverip_static}" != x"" ; then setenv serverip ${serverip_static}; fi
# Misc
nvme_init=if ${nvme_need_init}; then setenv nvme_need_init false; nvme scan; fi
